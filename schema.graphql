# custom scalar type for Date values
# we will store values in data base as native data object
# we will send data to the client in ISO string
scalar GraphQLDate

# explicit possible issue status types
enum StatusType {
  New
  Assigned
  Fixed
  Closed
}

# returned Issues specification
type Issue {
  # this is the "id" that is auto-generated by mongodb during document creation
  _id: ID!
  # unique integer assigned by us to differentiate each document sequentially
  id: Int!
  # name of te creator of the issue
  owner: String
  status: StatusType
  # date of creation of the issue
  created: GraphQLDate
  # expected date to solve the issue
  due: GraphQLDate
  # number of days to solve the issue "integer"
  effort: Int
  # summarized title about the issue
  title: String!
  # detailed description of the issue
  description: String
  # last deletion operation date
  deleted: GraphQLDate
  # last restoration operation date
  restored: GraphQLDate
}

# Specification for updating a document
# All can be updated except id, and created date
# No field is required
input IssueInputChange {
  status: StatusType
  owner: String
  due: GraphQLDate
  effort: Int
  title: String
  description: String
}

input InputNewIssue {
  # input type for adding new issue api
  id: Int
  status: StatusType = New
  owner: String
  due: GraphQLDate
  effort: Int
  created: GraphQLDate
  title: String!
  description: String
}

type CountObject {
  owner: String!
  New: Int
  Assigned: Int
  Closed: Int
  Fixed: Int
}

type ListOutput {
  issues: [Issue!]!
  pages: Int!
}

# User context object
type User {
  signedIn: Boolean!
  givenName: String
  email: String
  name: String
}

type Query {
  # query for retrieving a filtered list of documents
  issueList(
    status: StatusType,
    effortMin: Int,
    effortMax: Int,
    # current view page of pagination
    # if not supplied, return the first page
    page: Int = 1
    ): ListOutput!,
  # query for retrieving an document with specified id
  issueGet(id: Int!): Issue!
  # count of issues associated with each user
  counts(status: StatusType, effortMin: Int, effortMax: Int): [CountObject!]!
  # get a search string and returns array of matched documents
  issueSearch(search: String!): [Issue!]!
  user: User!
}

type Mutation {
  # mutation query for updating an document
  #  with the specified id by "field supplied in "changes" object
  issueUpdate(
    id: Int!,
    changes: IssueInputChange!
  ): Issue!,
  issueAdd(issue: InputNewIssue!): Issue!
  issueDelete(id: Int!): Boolean!
  issueRestore(id: Int!): Issue!
}
